"use strict";(self.webpackChunkcavin_huang_note=self.webpackChunkcavin_huang_note||[]).push([[29],{1513:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-724e6afe",path:"/javascript/blob%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90json%E6%95%B0%E6%8D%AE.html",title:"Blob类型数据转换Json数据类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码示例",slug:"代码示例",children:[]}],filePathRelative:"javascript/blob类型的数据转换成json数据.md",git:{updatedTime:1643101595e3,contributors:[{name:"CavinHuang",email:"sujinw@qq.com",commits:1}]}}},5249:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="blob类型数据转换json数据类型" tabindex="-1">Blob类型数据转换Json数据类型</h1><blockquote><p>&#39;FileReader&#39;对象允许Web应用程序异步读取存储在用户计算机上的文件的内容，使用&#39;File&#39;或&#39;Blob&#39;对象指定要读取的文件或数据。</p></blockquote><h2 id="代码示例" tabindex="-1">代码示例</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义JSON数据</span>\n<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 转换成字符串数组</span>\n<span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 转换成Blob类型数据</span>\n<span class="token keyword">let</span> blobData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>string<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 打印Blob结果： Blob { size: 17, type: &quot;&quot; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blobData<span class="token punctuation">)</span>\n\n <span class="token comment">// 创建读取文件对象</span>\n<span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nreader<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;loadend&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 返回的数据</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token string">&#39;返回结果数据&#39;</span><span class="token punctuation">)</span> <span class="token comment">// { name: &quot;小明&quot; }</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 设置读取的数据以及返回的数据类型为utf-8</span>\nreader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>blobData<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',4),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);